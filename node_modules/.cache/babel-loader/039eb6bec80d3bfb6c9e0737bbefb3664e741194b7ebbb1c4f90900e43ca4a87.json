{"ast":null,"code":"// src/queryObserver.ts\nimport { isServer, isValidTimeout, noop, replaceData, shallowEqualObjects, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { canFetch } from \"./retryer.js\";\nvar QueryObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.#currentQuery = void 0;\n    this.#currentQueryInitialState = void 0;\n    this.#currentResult = void 0;\n    this.#trackedProps = /* @__PURE__ */new Set();\n    this.#client = client;\n    this.options = options;\n    this.#selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  #client;\n  #currentQuery;\n  #currentQueryInitialState;\n  #currentResult;\n  #currentResultState;\n  #currentResultOptions;\n  #selectError;\n  #selectFn;\n  #selectResult;\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData;\n  #staleTimeoutId;\n  #refetchIntervalId;\n  #currentRefetchInterval;\n  #trackedProps;\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch();\n      } else {\n        this.updateResult();\n      }\n      this.#updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.#currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.#currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    this.#clearStaleTimeout();\n    this.#clearRefetchInterval();\n    this.#currentQuery.removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.#currentQuery;\n    this.options = this.#client.defaultQueryOptions(options);\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: this.#currentQuery,\n        observer: this\n      });\n    }\n    if (typeof this.options.enabled !== \"undefined\" && typeof this.options.enabled !== \"boolean\") {\n      throw new Error(\"Expected enabled to be a boolean\");\n    }\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n    this.#updateQuery();\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(this.#currentQuery, prevQuery, this.options, prevOptions)) {\n      this.#executeFetch();\n    }\n    this.updateResult(notifyOptions);\n    if (mounted && (this.#currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.#updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.#computeRefetchInterval();\n    if (mounted && (this.#currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.#currentRefetchInterval)) {\n      this.#updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.#client.getQueryCache().build(this.#client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      this.#currentResult = result;\n      this.#currentResultOptions = this.options;\n      this.#currentResultState = this.#currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.#trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  getCurrentQuery() {\n    return this.#currentQuery;\n  }\n  refetch() {\n    let {\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.#client.defaultQueryOptions(options);\n    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true\n    }).then(() => {\n      this.updateResult();\n      return this.#currentResult;\n    });\n  }\n  #executeFetch(fetchOptions) {\n    this.#updateQuery();\n    let promise = this.#currentQuery.fetch(this.options, fetchOptions);\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  #updateStaleTimeout() {\n    this.#clearStaleTimeout();\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, this.options.staleTime);\n    const timeout = time + 1;\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  #computeRefetchInterval() {\n    return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n  }\n  #updateRefetchInterval(nextInterval) {\n    this.#clearRefetchInterval();\n    this.#currentRefetchInterval = nextInterval;\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n      return;\n    }\n    this.#refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.#executeFetch();\n      }\n    }, this.#currentRefetchInterval);\n  }\n  #updateTimers() {\n    this.#updateStaleTimeout();\n    this.#updateRefetchInterval(this.#computeRefetchInterval());\n  }\n  #clearStaleTimeout() {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId);\n      this.#staleTimeoutId = void 0;\n    }\n  }\n  #clearRefetchInterval() {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId);\n      this.#refetchIntervalId = void 0;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.#currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.#currentResult;\n    const prevResultState = this.#currentResultState;\n    const prevResultOptions = this.#currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n    const {\n      state\n    } = query;\n    let {\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? \"fetching\" : \"paused\";\n        if (!state.dataUpdatedAt) {\n          status = \"pending\";\n        }\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        fetchStatus = \"idle\";\n      }\n    }\n    if (options.select && typeof state.data !== \"undefined\") {\n      if (prevResult && state.data === prevResultState?.data && options.select === this.#selectFn) {\n        data = this.#selectResult;\n      } else {\n        try {\n          this.#selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult?.data, data, options);\n          this.#selectResult = data;\n          this.#selectError = null;\n        } catch (selectError) {\n          this.#selectError = selectError;\n        }\n      }\n    } else {\n      data = state.data;\n    }\n    if (typeof options.placeholderData !== \"undefined\" && typeof data === \"undefined\" && status === \"pending\") {\n      let placeholderData;\n      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(this.#lastQueryWithDefinedData?.state.data, this.#lastQueryWithDefinedData) : options.placeholderData;\n        if (options.select && typeof placeholderData !== \"undefined\") {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.#selectError = null;\n          } catch (selectError) {\n            this.#selectError = selectError;\n          }\n        }\n      }\n      if (typeof placeholderData !== \"undefined\") {\n        status = \"success\";\n        data = replaceData(prevResult?.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n    if (this.#selectError) {\n      error = this.#selectError;\n      data = this.#selectResult;\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const result = {\n      status,\n      fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: state.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch\n    };\n    return result;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = this.#currentResult;\n    const nextResult = this.createResult(this.#currentQuery, this.options);\n    this.#currentResultState = this.#currentQuery.state;\n    this.#currentResultOptions = this.options;\n    if (this.#currentResultState.data !== void 0) {\n      this.#lastQueryWithDefinedData = this.#currentQuery;\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.#currentResult = nextResult;\n    const defaultNotifyOptions = {};\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const {\n        notifyOnChangeProps\n      } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(notifyOnChangePropsValue ?? this.#trackedProps);\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(this.#currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.#notify({\n      ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n  #updateQuery() {\n    const query = this.#client.getQueryCache().build(this.#client, this.options);\n    if (query === this.#currentQuery) {\n      return;\n    }\n    const prevQuery = this.#currentQuery;\n    this.#currentQuery = query;\n    this.#currentQueryInitialState = query.state;\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      this.#updateTimers();\n    }\n  }\n  #notify(notifyOptions) {\n    notifyManager.batch(() => {\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.#currentResult);\n        });\n      }\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: \"observerResultsUpdated\"\n      });\n    });\n  }\n};\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport { QueryObserver };","map":{"version":3,"mappings":"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","names":["isServer","isValidTimeout","noop","replaceData","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","canFetch","QueryObserver","constructor","client","options","Set","bindMethods","setOptions","refetch","bind","onSubscribe","listeners","size","addObserver","shouldFetchOnMount","updateResult","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","mounted","shouldFetchOptionally","staleTime","nextRefetchInterval","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","state","getCurrentResult","trackResult","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","fetch","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","cancelRefetch","promise","throwOnError","catch","isStale","time","dataUpdatedAt","timeout","setTimeout","refetchInterval","nextInterval","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","error","errorUpdatedAt","fetchStatus","status","isPlaceholderData","data","_optimisticResults","fetchOnMount","fetchOptionally","networkMode","select","selectError","placeholderData","Date","now","isFetching","isPending","isError","isLoading","isSuccess","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","some","typedKey","changed","has","onQueryUpdate","batch","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime","optimisticResult"],"sources":["C:\\todoAppMain\\node_modules\\@tanstack\\query-core\\src\\queryObserver.ts"],"sourcesContent":["import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch } from './retryer'\nimport type { QueryClient } from './queryClient'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps: Set<keyof QueryObserverResult> = new Set()\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.options = options\n    this.#selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.#updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.#trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.#currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.#currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let { error, errorUpdatedAt, fetchStatus, status } = state\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!state.dataUpdatedAt) {\n          status = 'pending'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Select data if needed\n    if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: state.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}