{"ast":null,"code":"// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter(x => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = class extends Subscribable {\n  #client;\n  #result;\n  #queries;\n  #observers;\n  #options;\n  #combinedResult;\n  constructor(client, queries, options) {\n    super();\n    this.#client = client;\n    this.#queries = [];\n    this.#observers = [];\n    this.#setResult([]);\n    this.setQueries(queries, options);\n  }\n  #setResult(value) {\n    this.#result = value;\n    this.#combinedResult = this.#combineResult(value);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.#onUpdate(observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    this.#observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, options, notifyOptions) {\n    this.#queries = queries;\n    this.#options = options;\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers;\n      const newObserverMatches = this.#findMatchingObservers(this.#queries);\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n      if (prevObservers.length === newObservers.length && !hasIndexChange && newObservers.length > 0) {\n        return;\n      }\n      this.#observers = newObservers;\n      this.#setResult(newResult);\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.#onUpdate(observer, result);\n        });\n      });\n      this.#notify();\n    });\n  }\n  getCurrentResult() {\n    return this.#combinedResult;\n  }\n  getQueries() {\n    return this.#observers.map(observer => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return this.#observers;\n  }\n  getOptimisticResult(queries) {\n    const matches = this.#findMatchingObservers(queries);\n    const result = matches.map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n    return [result, r => {\n      return this.#combineResult(r ?? result);\n    }, () => {\n      return matches.map((match, index) => {\n        const observerResult = result[index];\n        return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult) : observerResult;\n      });\n    }];\n  }\n  #combineResult(input) {\n    const combine = this.#options?.combine;\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input));\n    }\n    return input;\n  }\n  #findMatchingObservers(queries) {\n    const prevObservers = this.#observers;\n    const prevObserversMap = new Map(prevObservers.map(observer => [observer.options.queryHash, observer]));\n    const defaultedQueryOptions = queries.map(options => this.#client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObserversMap.get(defaultedOptions.queryHash);\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n      return [];\n    });\n    const matchedQueryHashes = new Set(matchingObservers.map(match => match.defaultedQueryOptions.queryHash));\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.has(defaultedOptions.queryHash));\n    const getObserver = options => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options);\n      const currentObserver = this.#observers.find(o => o.options.queryHash === defaultedOptions.queryHash);\n      return currentObserver ?? new QueryObserver(this.#client, defaultedOptions);\n    };\n    const newOrReusedObservers = unmatchedQueries.map(options => {\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n  #onUpdate(observer, result) {\n    const index = this.#observers.indexOf(observer);\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result));\n      this.#notify();\n    }\n  }\n  #notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.#result);\n      });\n    });\n  }\n};\nexport { QueriesObserver };","map":{"version":3,"mappings":"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","names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","QueriesObserver","constructor","client","queries","options","setQueries","onSubscribe","listeners","size","forEach","observer","subscribe","result","onUnsubscribe","destroy","Set","notifyOptions","batch","prevObservers","newObserverMatches","match","setOptions","defaultedQueryOptions","newObservers","map","newResult","getCurrentResult","hasIndexChange","some","length","hasListeners","getQueries","getCurrentQuery","getObservers","getOptimisticResult","matches","r","observerResult","notifyOnChangeProps","trackResult","input","combine","prevObserversMap","Map","queryHash","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","getObserver","currentObserver","find","o","newOrReusedObservers","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","listener"],"sources":["C:\\todoAppMain\\node_modules\\@tanstack\\query-core\\src\\queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: (result: Array<QueryObserverResult>) => TCombinedResult\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #combinedResult!: TCombinedResult\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = []\n    this.#observers = []\n\n    this.#setResult([])\n    this.setQueries(queries, options)\n  }\n\n  #setResult(value: Array<QueryObserverResult>) {\n    this.#result = value\n    this.#combinedResult = this.#combineResult(value)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (\n        prevObservers.length === newObservers.length &&\n        !hasIndexChange &&\n        newObservers.length > 0\n      ) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#setResult(newResult)\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): TCombinedResult {\n    return this.#combinedResult\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult)\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(input: Array<QueryObserverResult>): TCombinedResult {\n    const combine = this.#options?.combine\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input))\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result))\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}