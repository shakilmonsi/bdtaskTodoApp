{"ast":null,"code":"var _jsxFileName = \"C:\\\\todoAppMain\\\\src\\\\Pages\\\\DeleteData.jsx\",\n  _s = $RefreshSig$();\n// import { useQuery } from '@tanstack/react-query';\nimport React from 'react';\n// import toast from 'react-hot-toast';\n// import Loading from './Loading';\n// import ConfirmationModal from './ConfirmationModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeleteData = () => {\n  _s();\n  // const [deletingDoctor, setDeletingDoctor] = useState(null);\n\n  // const closeModal = () => {\n  //     setDeletingDoctor(null);\n  // }\n\n  const {\n    data: doctors,\n    isLoading,\n    refetch\n  } = useQuery({\n    queryKey: ['doctors'],\n    queryFn: async () => {\n      try {\n        const res = await fetch('http://localhost:5000/doctors', {\n          headers: {\n            authorization: `bearer ${localStorage.getItem('accessToken')}`\n          }\n        });\n        const data = await res.json();\n        return data;\n      } catch (error) {}\n    }\n  });\n\n  // const handleDeleteDoctor = doctor => {\n  //     fetch(`http://localhost:5000/doctors/${doctor._id}`, {\n  //         method: 'DELETE', \n  //         headers: {\n  //             authorization: `bearer ${localStorage.getItem('accessToken')}`\n  //         }\n  //     })\n  //     .then(res => res.json())\n  //     .then(data => {\n  //         if(data.deletedCount > 0){\n  //             refetch();\n  //             toast.success(`Doctor ${doctor.name} deleted successfully`)\n  //         }\n  //     })\n  // }\n\n  // if (isLoading) {\n  //     return <Loading></Loading>\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(DeleteData, \"NqeGZchZGOqeyrzhSEGmqjdfaU4=\", true);\n_c = DeleteData;\nexport default DeleteData;\nvar _c;\n$RefreshReg$(_c, \"DeleteData\");","map":{"version":3,"names":["React","DeleteData","data","doctors","isLoading","refetch","useQuery","queryKey","queryFn","res","fetch","headers","authorization","localStorage","getItem","json","error"],"sources":["C:/todoAppMain/src/Pages/DeleteData.jsx"],"sourcesContent":["// import { useQuery } from '@tanstack/react-query';\r\nimport React from 'react';\r\n// import toast from 'react-hot-toast';\r\n// import Loading from './Loading';\r\n// import ConfirmationModal from './ConfirmationModal';\r\n\r\nconst DeleteData = () => {\r\n    // const [deletingDoctor, setDeletingDoctor] = useState(null);\r\n\r\n    // const closeModal = () => {\r\n    //     setDeletingDoctor(null);\r\n    // }\r\n\r\n\r\n    const { data: doctors, isLoading, refetch } = useQuery({\r\n        queryKey: ['doctors'],\r\n        queryFn: async () => {\r\n            try {\r\n                const res = await fetch('http://localhost:5000/doctors', {\r\n                    headers: {\r\n                        authorization: `bearer ${localStorage.getItem('accessToken')}`\r\n                    }\r\n                });\r\n                const data = await res.json();\r\n                return data;\r\n            }\r\n            catch (error) {\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    \r\n    // const handleDeleteDoctor = doctor => {\r\n    //     fetch(`http://localhost:5000/doctors/${doctor._id}`, {\r\n    //         method: 'DELETE', \r\n    //         headers: {\r\n    //             authorization: `bearer ${localStorage.getItem('accessToken')}`\r\n    //         }\r\n    //     })\r\n    //     .then(res => res.json())\r\n    //     .then(data => {\r\n    //         if(data.deletedCount > 0){\r\n    //             refetch();\r\n    //             toast.success(`Doctor ${doctor.name} deleted successfully`)\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    // if (isLoading) {\r\n    //     return <Loading></Loading>\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {/* <h2 className=\"text-3xl\">Manage Doctors: {doctors?.length}</h2>\r\n            <div className=\"overflow-x-auto\">\r\n                <table className=\"table w-full\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>Avatar</th>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Specialty</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            doctors.map((doctor, i) => <tr key={doctor._id}>\r\n                                <th>{i + 1}</th>\r\n                                <td><div className=\"avatar\">\r\n                                    <div className=\"w-24 rounded-full\">\r\n                                        <img src={doctor.image} alt=\"\" />\r\n                                    </div>\r\n                                </div></td>\r\n                                <td>{doctor.name}</td>\r\n                                <td>{doctor.email}</td>\r\n                                <td>{doctor.specialty}</td>\r\n                                <td>\r\n                                    <label onClick={() => setDeletingDoctor(doctor)} htmlFor=\"confirmation-modal\" className=\"btn btn-sm btn-error\">Delete</label>\r\n                                </td>\r\n                            </tr>)\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            {\r\n                deletingDoctor && <ConfirmationModal\r\n                    title={`Are you sure you want to delete?`}\r\n                    message={`If you delete ${deletingDoctor.name}. It cannot be undone.`}\r\n                    successAction = {handleDeleteDoctor}\r\n                    successButtonName=\"Delete\"\r\n                    modalData = {deletingDoctor}\r\n                    closeModal = {closeModal}\r\n                >\r\n                </ConfirmationModal>\r\n            } */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeleteData;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;AAAA;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;EACrB;;EAEA;EACA;EACA;;EAGA,MAAM;IAAEC,IAAI,EAAEC,OAAO;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGC,QAAQ,CAAC;IACnDC,QAAQ,EAAE,CAAC,SAAS,CAAC;IACrBC,OAAO,EAAE,YAAY;MACjB,IAAI;QACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;UACrDC,OAAO,EAAE;YACLC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UACjE;QACJ,CAAC,CAAC;QACF,MAAMZ,IAAI,GAAG,MAAMO,GAAG,CAACM,IAAI,EAAE;QAC7B,OAAOb,IAAI;MACf,CAAC,CACD,OAAOc,KAAK,EAAE,CAEd;IACJ;EACJ,CAAC,CAAC;;EAGF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACI;IAAA;IAAA;IAAA;EAAA,QA6CM;AAEd,CAAC;AAAC,GA/FIf,UAAU;AAAA,KAAVA,UAAU;AAiGhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}