{"ast":null,"code":"\"use client\";\n\n// src/useMutationState.ts\nimport * as React from \"react\";\nimport { notifyManager, replaceEqualDeep } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nfunction useIsMutating(filters, queryClient) {\n  const client = useQueryClient(queryClient);\n  return useMutationState({\n    filters: {\n      ...filters,\n      status: \"pending\"\n    }\n  }, client).length;\n}\nfunction getResult(mutationCache, options) {\n  return mutationCache.findAll(options.filters).map(mutation => options.select ? options.select(mutation) : mutation.state);\n}\nfunction useMutationState() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let queryClient = arguments.length > 1 ? arguments[1] : undefined;\n  const mutationCache = useQueryClient(queryClient).getMutationCache();\n  const optionsRef = React.useRef(options);\n  const result = React.useRef();\n  if (!result.current) {\n    result.current = getResult(mutationCache, options);\n  }\n  React.useEffect(() => {\n    optionsRef.current = options;\n  });\n  return React.useSyncExternalStore(React.useCallback(onStoreChange => mutationCache.subscribe(() => {\n    const nextResult = replaceEqualDeep(result.current, getResult(mutationCache, optionsRef.current));\n    if (result.current !== nextResult) {\n      result.current = nextResult;\n      notifyManager.schedule(onStoreChange);\n    }\n  }), [mutationCache]), () => result.current, () => result.current);\n}\nexport { useIsMutating, useMutationState };","map":{"version":3,"mappings":";;;AACA,YAAYA,WAAW;AAEvB,SAASC,eAAeC,wBAAwB;AAChD,SAASC,sBAAsB;AAUxB,SAASC,cACdC,SACAC,aACQ;EACR,MAAMC,SAASJ,eAAeG,WAAW;EACzC,OAAOE,iBACL;IAAEH,SAAS;MAAE,GAAGA;MAASI,QAAQ;IAAU;EAAE,GAC7CF,OACF,CAAEG;AACJ;AASA,SAASC,UACPC,eACAC,SACgB;EAChB,OAAOD,cACJE,QAAQD,QAAQR,OAAO,EACvBU,IACEC,YACEH,QAAQI,SACLJ,QAAQI,OACND,SACF,GACAA,SAASE,MACjB;AACJ;AAEO,SAASV,mBAGE;EAAA,IAFhBK,8EAAyC,CAAC;EAAA,IAC1CP;EAEA,MAAMM,gBAAgBT,eAAeG,WAAW,EAAEa,kBAAiB;EACnE,MAAMC,aAAmBpB,aAAOa,OAAO;EACvC,MAAMQ,SAAerB,cAAuB;EAC5C,IAAI,CAACqB,OAAOC,SAAS;IACnBD,OAAOC,UAAUX,UAAUC,eAAeC,OAAO;EACnD;EAEMb,gBAAU,MAAM;IACpBoB,WAAWE,UAAUT;EACvB,CAAC;EAED,OAAab,2BACLA,kBACHuB,iBACCX,cAAcY,UAAU,MAAM;IAC5B,MAAMC,aAAavB,iBACjBmB,OAAOC,SACPX,UAAUC,eAAeQ,WAAWE,OAAO,EAC7C;IACA,IAAID,OAAOC,YAAYG,YAAY;MACjCJ,OAAOC,UAAUG;MACjBxB,cAAcyB,SAASH,aAAa;IACtC;EACF,CAAC,GACH,CAACX,aAAa,EAChB,EACA,MAAMS,OAAOC,SACb,MAAMD,OAAOC,QACf;AACF","names":["React","notifyManager","replaceEqualDeep","useQueryClient","useIsMutating","filters","queryClient","client","useMutationState","status","length","getResult","mutationCache","options","findAll","map","mutation","select","state","getMutationCache","optionsRef","result","current","onStoreChange","subscribe","nextResult","schedule"],"sources":["C:\\bdtaskTodoApp\\node_modules\\@tanstack\\react-query\\src\\useMutationState.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { notifyManager, replaceEqualDeep } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DefaultError,\n  Mutation,\n  MutationCache,\n  MutationFilters,\n  MutationState,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  return useMutationState(\n    { filters: { ...filters, status: 'pending' } },\n    client,\n  ).length\n}\n\ntype MutationStateOptions<TResult = MutationState> = {\n  filters?: MutationFilters\n  select?: (\n    mutation: Mutation<unknown, DefaultError, unknown, unknown>,\n  ) => TResult\n}\n\nfunction getResult<TResult = MutationState>(\n  mutationCache: MutationCache,\n  options: MutationStateOptions<TResult>,\n): Array<TResult> {\n  return mutationCache\n    .findAll(options.filters)\n    .map(\n      (mutation): TResult =>\n        (options.select\n          ? options.select(\n              mutation as Mutation<unknown, DefaultError, unknown, unknown>,\n            )\n          : mutation.state) as TResult,\n    )\n}\n\nexport function useMutationState<TResult = MutationState>(\n  options: MutationStateOptions<TResult> = {},\n  queryClient?: QueryClient,\n): Array<TResult> {\n  const mutationCache = useQueryClient(queryClient).getMutationCache()\n  const optionsRef = React.useRef(options)\n  const result = React.useRef<Array<TResult>>()\n  if (!result.current) {\n    result.current = getResult(mutationCache, options)\n  }\n\n  React.useEffect(() => {\n    optionsRef.current = options\n  })\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(() => {\n          const nextResult = replaceEqualDeep(\n            result.current,\n            getResult(mutationCache, optionsRef.current),\n          )\n          if (result.current !== nextResult) {\n            result.current = nextResult\n            notifyManager.schedule(onStoreChange)\n          }\n        }),\n      [mutationCache],\n    ),\n    () => result.current,\n    () => result.current,\n  )!\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}