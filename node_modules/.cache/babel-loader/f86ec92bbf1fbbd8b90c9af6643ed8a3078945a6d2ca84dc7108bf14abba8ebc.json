{"ast":null,"code":"\"use client\";\n\n// src/useMutation.ts\nimport * as React from \"react\";\nimport { MutationObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { shouldThrowError } from \"./utils.js\";\nfunction useMutation(options, queryClient) {\n  const client = useQueryClient(queryClient);\n  const [observer] = React.useState(() => new MutationObserver(client, options));\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = React.useSyncExternalStore(React.useCallback(onStoreChange => observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  const mutate = React.useCallback((variables, mutateOptions) => {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n  return {\n    ...result,\n    mutate,\n    mutateAsync: result.mutate\n  };\n}\nfunction noop() {}\nexport { useMutation };","map":{"version":3,"mappings":";;;AACA,YAAYA,WAAW;AACvB,SAASC,kBAAkBC,qBAAqB;AAChD,SAASC,sBAAsB;AAC/B,SAASC,wBAAwB;AAU1B,SAASC,YAMdC,SACAC,aACwD;EACxD,MAAMC,SAASL,eAAeI,WAAW;EAEzC,MAAM,CAACE,QAAQ,IAAUT,eACvB,MACE,IAAIC,iBACFO,QACAF,QACF,CACJ;EAEMN,gBAAU,MAAM;IACpBS,SAASC,WAAWJ,OAAO;EAC7B,GAAG,CAACG,UAAUH,OAAO,CAAC;EAEtB,MAAMK,SAAeX,2BACbA,kBACHY,iBACCH,SAASI,UAAUX,cAAcY,WAAWF,aAAa,CAAC,GAC5D,CAACH,QAAQ,EACX,EACA,MAAMA,SAASM,kBAAiB,EAChC,MAAMN,SAASM,kBAAiB,CAClC;EAEA,MAAMC,SAAehB,kBAGnB,CAACiB,WAAWC,kBAAkB;IAC5BT,SAASO,OAAOC,WAAWC,aAAa,EAAEC,MAAMC,IAAI;EACtD,GACA,CAACX,QAAQ,EACX;EAEA,IACEE,OAAOU,SACPjB,iBAAiBK,SAASH,QAAQgB,cAAc,CAACX,OAAOU,KAAK,CAAC,GAC9D;IACA,MAAMV,OAAOU;EACf;EAEA,OAAO;IAAE,GAAGV;IAAQK;IAAQO,aAAaZ,OAAOK;EAAO;AACzD;AAGA,SAASI,OAAO,CAAC","names":["React","MutationObserver","notifyManager","useQueryClient","shouldThrowError","useMutation","options","queryClient","client","observer","setOptions","result","onStoreChange","subscribe","batchCalls","getCurrentResult","mutate","variables","mutateOptions","catch","noop","error","throwOnError","mutateAsync"],"sources":["C:\\bdtaskTodoApp\\node_modules\\@tanstack\\react-query\\src\\useMutation.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}