{"ast":null,"code":"\"use client\";\n\n// src/QueryClientProvider.tsx\nimport * as React from \"react\";\nvar QueryClientContext = React.createContext(void 0);\nvar useQueryClient = queryClient => {\n  const client = React.useContext(QueryClientContext);\n  if (queryClient) {\n    return queryClient;\n  }\n  if (!client) {\n    throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n  }\n  return client;\n};\nvar QueryClientProvider = _ref => {\n  let {\n    client,\n    children\n  } = _ref;\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  return /* @__PURE__ */React.createElement(QueryClientContext.Provider, {\n    value: client\n  }, children);\n};\nexport { QueryClientContext, QueryClientProvider, useQueryClient };","map":{"version":3,"mappings":";;;AACA,YAAYA,WAAW;AAIhB,IAAMC,qBAA2BD,oBACtC,OACF;AAEO,IAAME,iBAAkBC,eAA8B;EAC3D,MAAMC,SAAeJ,iBAAWC,kBAAkB;EAElD,IAAIE,aAAa;IACf,OAAOA;EACT;EAEA,IAAI,CAACC,QAAQ;IACX,MAAM,IAAIC,MAAM,wDAAwD;EAC1E;EAEA,OAAOD;AACT;AAOO,IAAME,sBAAsB,QAGU;EAAA,IAHT;IAClCF;IACAG;EACF;EACQP,gBAAU,MAAM;IACpBI,OAAOI,OAAM;IACb,OAAO,MAAM;MACXJ,OAAOK,SAAQ;IACjB;EACF,GAAG,CAACL,MAAM,CAAC;EAEX,OACE,mCAACH,mBAAmBS,UAAnB;IAA4BC,OAAOP;EAAA,GACjCG,QACH;AAEJ","names":["React","QueryClientContext","useQueryClient","queryClient","client","Error","QueryClientProvider","children","mount","unmount","Provider","value"],"sources":["C:\\bdtaskTodoApp\\node_modules\\@tanstack\\react-query\\src\\QueryClientProvider.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\n\nexport const QueryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\n\nexport const useQueryClient = (queryClient?: QueryClient) => {\n  const client = React.useContext(QueryClientContext)\n\n  if (queryClient) {\n    return queryClient\n  }\n\n  if (!client) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return client\n}\n\nexport type QueryClientProviderProps = {\n  client: QueryClient\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  return (\n    <QueryClientContext.Provider value={client}>\n      {children}\n    </QueryClientContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}