{"ast":null,"code":"// src/mutationObserver.ts\nimport { getDefaultState } from \"./mutation.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { hashKey, shallowEqualObjects } from \"./utils.js\";\nvar MutationObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.#currentResult = void 0;\n    this.#client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.#updateResult();\n  }\n  #client;\n  #currentResult;\n  #currentMutation;\n  #mutateOptions;\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.#client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getMutationCache().notify({\n        type: \"observerOptionsUpdated\",\n        mutation: this.#currentMutation,\n        observer: this\n      });\n    }\n    this.#currentMutation?.setOptions(this.options);\n    if (prevOptions?.mutationKey && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {\n      this.reset();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.#updateResult();\n    this.#notify(action);\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  reset() {\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = void 0;\n    this.#updateResult();\n    this.#notify();\n  }\n  mutate(variables, options) {\n    this.#mutateOptions = options;\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);\n    this.#currentMutation.addObserver(this);\n    return this.#currentMutation.execute(variables);\n  }\n  #updateResult() {\n    const state = this.#currentMutation?.state ?? getDefaultState();\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === \"pending\",\n      isSuccess: state.status === \"success\",\n      isError: state.status === \"error\",\n      isIdle: state.status === \"idle\",\n      mutate: this.mutate,\n      reset: this.reset\n    };\n  }\n  #notify(action) {\n    notifyManager.batch(() => {\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables;\n        const context = this.#currentResult.context;\n        if (action?.type === \"success\") {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context);\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context);\n        } else if (action?.type === \"error\") {\n          this.#mutateOptions.onError?.(action.error, variables, context);\n          this.#mutateOptions.onSettled?.(void 0, action.error, variables, context);\n        }\n      }\n      this.listeners.forEach(listener => {\n        listener(this.#currentResult);\n      });\n    });\n  }\n};\nexport { MutationObserver };","map":{"version":3,"mappings":";AAAA,SAASA,uBAAuB;AAChC,SAASC,qBAAqB;AAC9B,SAASC,oBAAoB;AAC7B,SAASC,SAASC,2BAA2B;AAkBtC,IAAMC,mBAAN,cAKGH,aAER;EASAI,YACEC,QACAC,SACA;IACA,OAAM;IATR,sBACE;IAUA,KAAK,UAAUD;IACf,KAAKE,WAAWD,OAAO;IACvB,KAAKE,aAAY;IACjB,KAAK,eAAc;EACrB;EAhBA;EACA;EAEA;EACA;EAcUA,cAAoB;IAC5B,KAAKC,SAAS,KAAKA,OAAOC,KAAK,IAAI;IACnC,KAAKC,QAAQ,KAAKA,MAAMD,KAAK,IAAI;EACnC;EAEAH,WACED,SACA;IACA,MAAMM,cAAc,KAAKN;IAGzB,KAAKA,UAAU,KAAK,QAAQO,uBAAuBP,OAAO;IAC1D,IAAI,CAACJ,oBAAoBU,aAAa,KAAKN,OAAO,GAAG;MACnD,KAAK,QAAQQ,kBAAiB,CAAEC,OAAO;QACrCC,MAAM;QACNC,UAAU,KAAK;QACfC,UAAU;MACZ,CAAC;IACH;IACA,KAAK,kBAAkBX,WAAW,KAAKD,OAAO;IAE9C,IACEM,aAAaO,eACb,KAAKb,QAAQa,eACblB,QAAQW,YAAYO,WAAW,MAAMlB,QAAQ,KAAKK,QAAQa,WAAW,GACrE;MACA,KAAKR,OAAM;IACb;EACF;EAEUS,gBAAsB;IAC9B,IAAI,CAAC,KAAKC,cAAa,EAAG;MACxB,KAAK,kBAAkBC,eAAe,IAAI;IAC5C;EACF;EAEAC,iBAAiBC,QAA2D;IAC1E,KAAK,eAAc;IAEnB,KAAK,QAAQA,MAAM;EACrB;EAEAC,mBAKE;IACA,OAAO,KAAK;EACd;EAEAd,QAAc;IAGZ,KAAK,kBAAkBW,eAAe,IAAI;IAC1C,KAAK,mBAAmB;IACxB,KAAK,eAAc;IACnB,KAAK,SAAQ;EACf;EAEAb,OACEiB,WACApB,SACgB;IAChB,KAAK,iBAAiBA;IAEtB,KAAK,kBAAkBgB,eAAe,IAAI;IAE1C,KAAK,mBAAmB,KAAK,QAC1BR,kBAAiB,CACjBa,MAAM,KAAK,SAAS,KAAKrB,OAAO;IAEnC,KAAK,iBAAiBsB,YAAY,IAAI;IAEtC,OAAO,KAAK,iBAAiBC,QAAQH,SAAS;EAChD;EAEA,gBAAsB;IACpB,MAAMI,QACJ,KAAK,kBAAkBA,SACvBhC,iBAAqD;IAEvD,KAAK,iBAAiB;MACpB,GAAGgC;MACHC,WAAWD,MAAME,WAAW;MAC5BC,WAAWH,MAAME,WAAW;MAC5BE,SAASJ,MAAME,WAAW;MAC1BG,QAAQL,MAAME,WAAW;MACzBvB,QAAQ,KAAKA;MACbE,OAAO,KAAKA;IACd;EACF;EAEA,QAAQa,QAA4D;IAClEzB,cAAcqC,MAAM,MAAM;MAExB,IAAI,KAAK,kBAAkB,KAAKf,cAAa,EAAG;QAC9C,MAAMK,YAAY,KAAK,eAAeA;QACtC,MAAMW,UAAU,KAAK,eAAeA;QAEpC,IAAIb,QAAQR,SAAS,WAAW;UAC9B,KAAK,eAAesB,YAAYd,OAAOe,MAAMb,WAAWW,OAAQ;UAChE,KAAK,eAAeG,YAAYhB,OAAOe,MAAM,MAAMb,WAAWW,OAAO;QACvE,WAAWb,QAAQR,SAAS,SAAS;UACnC,KAAK,eAAeyB,UAAUjB,OAAOkB,OAAOhB,WAAWW,OAAO;UAC9D,KAAK,eAAeG,YAClB,QACAhB,OAAOkB,OACPhB,WACAW,QACF;QACF;MACF;MAGA,KAAKM,UAAUC,QAASC,YAAa;QACnCA,SAAS,KAAK,cAAc;MAC9B,CAAC;IACH,CAAC;EACH;AACF","names":["getDefaultState","notifyManager","Subscribable","hashKey","shallowEqualObjects","MutationObserver","constructor","client","options","setOptions","bindMethods","mutate","bind","reset","prevOptions","defaultMutationOptions","getMutationCache","notify","type","mutation","observer","mutationKey","onUnsubscribe","hasListeners","removeObserver","onMutationUpdate","action","getCurrentResult","variables","build","addObserver","execute","state","isPending","status","isSuccess","isError","isIdle","batch","context","onSuccess","data","onSettled","onError","error","listeners","forEach","listener"],"sources":["C:\\bdtaskTodoApp\\node_modules\\@tanstack\\query-core\\src\\mutationObserver.ts"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n    this.#currentMutation?.setOptions(this.options)\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}