{"ast":null,"code":"\"use client\";\n\n// src/errorBoundaryUtils.ts\nimport * as React from \"react\";\nimport { shouldThrowError } from \"./utils.js\";\nvar ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {\n  if (options.suspense || options.throwOnError) {\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\nvar useClearResetErrorBoundary = errorResetBoundary => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\nvar getHasError = _ref => {\n  let {\n    result,\n    errorResetBoundary,\n    throwOnError,\n    query\n  } = _ref;\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && shouldThrowError(throwOnError, [result.error, query]);\n};\nexport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary };","map":{"version":3,"mappings":";;;AACA,YAAYA,WAAW;AACvB,SAASC,wBAAwB;AAU1B,IAAMC,kCAAkC,CAO7CC,SAOAC,uBACG;EACH,IAAID,QAAQE,YAAYF,QAAQG,cAAc;IAE5C,IAAI,CAACF,mBAAmBG,SAAQ,EAAG;MACjCJ,QAAQK,eAAe;IACzB;EACF;AACF;AAEO,IAAMC,6BACXL,sBACG;EACGJ,gBAAU,MAAM;IACpBI,mBAAmBM,YAAW;EAChC,GAAG,CAACN,kBAAkB,CAAC;AACzB;AAEO,IAAMO,cAAc,QAgBrB;EAAA,IAVJ;IACAC;IACAR;IACAE;IACAO;EACF;EAME,OACED,OAAOE,WACP,CAACV,mBAAmBG,SAAQ,IAC5B,CAACK,OAAOG,cACRF,SACAZ,iBAAiBK,cAAc,CAACM,OAAOI,OAAOH,KAAK,CAAC;AAExD","names":["React","shouldThrowError","ensurePreventErrorBoundaryRetry","options","errorResetBoundary","suspense","throwOnError","isReset","retryOnMount","useClearResetErrorBoundary","clearReset","getHasError","result","query","isError","isFetching","error"],"sources":["C:\\todoAppMain\\node_modules\\@tanstack\\react-query\\src\\errorBoundaryUtils.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.throwOnError) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    shouldThrowError(throwOnError, [result.error, query])\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}