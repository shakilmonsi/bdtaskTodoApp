{"ast":null,"code":"// src/hydration.ts\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.meta && {\n      meta: mutation.meta\n    })\n  };\n}\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && {\n      meta: query.meta\n    })\n  };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\nfunction dehydrate(client) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const filterMutation = options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(client, {\n      ...options?.defaultOptions?.mutations,\n      mutationKey: dehydratedMutation.mutationKey,\n      meta: dehydratedMutation.meta\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(_ref => {\n    let {\n      queryKey,\n      state,\n      queryHash,\n      meta\n    } = _ref;\n    const query = queryCache.get(queryHash);\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        const {\n          fetchStatus: _ignored,\n          ...dehydratedQueryState\n        } = state;\n        query.setState(dehydratedQueryState);\n      }\n      return;\n    }\n    queryCache.build(client, {\n      ...options?.defaultOptions?.queries,\n      queryKey,\n      queryHash,\n      meta\n    },\n    // Reset fetch status to idle to avoid\n    // query being stuck in fetching state upon hydration\n    {\n      ...state,\n      fetchStatus: \"idle\"\n    });\n  });\n}\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"mappings":";AA8CA,SAASA,kBAAkBC,UAAwC;EACjE,OAAO;IACLC,aAAaD,SAASE,QAAQD;IAC9BE,OAAOH,SAASG;IAChB,IAAIH,SAASI,QAAQ;MAAEA,MAAMJ,SAASI;IAAK;EAC7C;AACF;AAMA,SAASC,eAAeC,OAA+B;EACrD,OAAO;IACLH,OAAOG,MAAMH;IACbI,UAAUD,MAAMC;IAChBC,WAAWF,MAAME;IACjB,IAAIF,MAAMF,QAAQ;MAAEA,MAAME,MAAMF;IAAK;EACvC;AACF;AAEO,SAASK,+BAA+BT,UAAoB;EACjE,OAAOA,SAASG,MAAMO;AACxB;AAEO,SAASC,4BAA4BL,OAAc;EACxD,OAAOA,MAAMH,MAAMS,WAAW;AAChC;AAEO,SAASC,UACdC,QAEiB;EAAA,IADjBZ,8EAA4B,CAAC;EAE7B,MAAMa,iBACJb,QAAQc,2BAA2BP;EAErC,MAAMQ,YAAYH,OACfI,kBAAiB,CACjBC,QAAO,CACPC,QAASpB,YACRe,eAAef,QAAQ,IAAI,CAACD,kBAAkBC,QAAQ,CAAC,IAAI,EAAC,CAC9D;EAEF,MAAMqB,cACJnB,QAAQoB,wBAAwBX;EAElC,MAAMY,UAAUT,OACbU,eAAc,CACdL,QAAO,CACPC,QAASd,SAAWe,YAAYf,KAAK,IAAI,CAACD,eAAeC,KAAK,CAAC,IAAI,EAAG;EAEzE,OAAO;IAAEW;IAAWM;EAAQ;AAC9B;AAEO,SAASE,QACdX,QACAY,iBACAxB,SACM;EACN,IAAI,OAAOwB,oBAAoB,YAAYA,oBAAoB,MAAM;IACnE;EACF;EAEA,MAAMC,gBAAgBb,OAAOI,kBAAiB;EAC9C,MAAMU,aAAad,OAAOU,eAAc;EAGxC,MAAMP,YAAaS,gBAAoCT,aAAa,EAAC;EAErE,MAAMM,UAAWG,gBAAoCH,WAAW,EAAC;EAEjEN,UAAUY,QAASC,sBAAuB;IACxCH,cAAcI,MACZjB,QACA;MACE,GAAGZ,SAAS8B,gBAAgBf;MAC5BhB,aAAa6B,mBAAmB7B;MAChCG,MAAM0B,mBAAmB1B;IAC3B,GACA0B,mBAAmB3B,MACrB;EACF,CAAC;EAEDoB,QAAQM,QAAQ,QAA0C;IAAA,IAAzC;MAAEtB;MAAUJ;MAAOK;MAAWJ;IAAK;IAClD,MAAME,QAAQsB,WAAWK,IAAIzB,SAAS;IAGtC,IAAIF,OAAO;MACT,IAAIA,MAAMH,MAAM+B,gBAAgB/B,MAAM+B,eAAe;QAGnD,MAAM;UAAEC,aAAaC;UAAU,GAAGC;QAAqB,IAAIlC;QAC3DG,MAAMgC,SAASD,oBAAoB;MACrC;MACA;IACF;IAGAT,WAAWG,MACTjB,QACA;MACE,GAAGZ,SAAS8B,gBAAgBT;MAC5BhB;MACAC;MACAJ;IACF;IAAA;IAAA;IAGA;MACE,GAAGD;MACHgC,aAAa;IACf,EACF;EACF,CAAC;AACH","names":["dehydrateMutation","mutation","mutationKey","options","state","meta","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","filterMutation","shouldDehydrateMutation","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","forEach","dehydratedMutation","build","defaultOptions","get","dataUpdatedAt","fetchStatus","_ignored","dehydratedQueryState","setState"],"sources":["C:\\bdtaskTodoApp\\node_modules\\@tanstack\\query-core\\src\\hydration.ts"],"sourcesContent":["import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) => (filterQuery(query) ? [dehydrateQuery(query)] : []))\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach((dehydratedMutation) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n        meta: dehydratedMutation.meta,\n      },\n      dehydratedMutation.state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta }) => {\n    const query = queryCache.get(queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...dehydratedQueryState } = state\n        query.setState(dehydratedQueryState)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta,\n      },\n      // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      {\n        ...state,\n        fetchStatus: 'idle',\n      },\n    )\n  })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}